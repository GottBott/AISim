import agent
import time
import json
import sys
import random

class GreedyAgent(agent.Agent):


    def run_method(self):


        print("\n Methods avaiable")
        print(str(self.available_methods))
        print("")

               
        index =0
        max =0;
        
        for m in range(len(self.available_methods)):
            if self.eval_quality_distrubution(self.available_methods[m][2]) > max:
                max = self.eval_quality_distrubution(self.available_methods[m][2])
                index=m

        print("\n\n\n")
        print index
        print max
        print("\n\n\n")
        return self.available_methods[index][0]



    def next_tick_message(self, message):
        if  int(message['Message']['Tick']) ==2:
            for i in range(len(self.sim_agents)):
                outMesssage = {}
                outMesssage["MessageType"] = "AgentToAgentMessage"
                outMesssage["Message"] = {}
                outMesssage["Message"]["MsgSender"] = self.name
                outMesssage["Message"]["MsgDest"] = self.sim_agents[i]
                outMesssage["Message"]["Content"] = {}
                outMesssage["Message"]["Content"]["Load"] = len(self.available_methods)
                outMesssage["Message"]["Content"]["Completed"] = False
                self.s.send(bytes(json.dumps(outMesssage)+"\n"))
            
        if self.available_methods and self.running_method is None and self.requested_method is None:
            self.ask_to_start_method(self.run_method())

        
        if(len(self.available_methods) ==0 and int(message['Message']['Tick']) % 5 ==0):
            for m in self.unavailable_methods:
                method = {}
                method["MessageType"] = "AskMethodStatusMessage"
                method["Message"] = {}
                method["Message"]["MsgSender"] = self.name
                method["Message"]["MsgDest"] = "SIMULATOR"
                method["Message"]["MethodName"] = m[0]
                self.s.send(bytes(json.dumps(method)+"\n"))
     
        
        

    def confirm_method_start_message(self, message):
        if message['Message']['Started']:
            self.running_method = self.requested_method
            if str(message['Message']['MethodName']) == "t1-m1":
                method = {}
                method["MessageType"] = "AbortMethodMessage"
                method["Message"] = {}
                method["Message"]["MsgSender"] = self.name
                method["Message"]["MsgDest"] = "SIMULATOR"
                method["Message"]["MethodName"] = str(message['Message']['MethodName'])
                self.s.send(bytes(json.dumps(method)+"\n"))
                      
        else:
            for i in range(len(self.available_methods)):
                if self.available_methods[i][0] == message['Message']['MethodName']:
                    tmp = self.available_methods.pop(i)
                    self.unavailable_methods.append(tmp)
                    print("\n\n ADDING METHOD TO unavailable_methods \n\n")
                    break
        self.requested_method = None
        
    def confirm_method_Abort_message(self, message):
        self.running_method = None
        self.requested_method = None
        for i in range(len(self.available_methods)):
                if self.available_methods[i][0] == message['Message']['MethodName']:
                    tmp = self.available_methods.pop(i)
                    self.unavailable_methods.append(tmp)
                    print("\n\n ADDING METHOD TO unavailable_methods \n\n")
                    break   

    def agent_to_agent_message(self, message):
        print("agent message")

            
    def notify_method_completed_message(self, message):
        self.running_method = None      
        print("Removing " + message['Message']['MethodName'] + " from avaiable Methods")
        for i in range(len(self.available_methods)):
            if self.available_methods[i][0] == message['Message']['MethodName']:
                self.available_methods.pop(i)
                break
        for i in range(len(self.sim_agents)):
            outMesssage = {}
            outMesssage["MessageType"] = "AgentToAgentMessage"
            outMesssage["Message"] = {}
            outMesssage["Message"]["MsgSender"] = self.name
            outMesssage["Message"]["MsgDest"] = self.sim_agents[i]
            outMesssage["Message"]["Content"] = {}
            outMesssage["Message"]["Content"]["Load"] = len(self.available_methods)
            outMesssage["Message"]["Content"]["Completed"] = str(message['Message']['MethodName'])
            self.s.send(bytes(json.dumps(outMesssage)+"\n"))

    def notify_relationship_activation_message(self, message):
        if(message["Message"]["Type"] == "Disables"):
            i=0
            while i < len(self.available_methods):
                if(self.available_methods[i][0] == message["Message"]["Target"]):
                    tmp = self.available_methods.pop(i)
                    self.unavailable_methods.append(tmp)
                    print("\n\n Removing disabled method\n\n")
                i+=1
    
        elif(message["Message"]["Type"] == "Enables"):
            i=0
            while i < len(self.unavailable_methods):
                if(self.unavailable_methods[i][0] == message["Message"]["Target"]):
                    tmp = self.unavailable_methods.pop(i)
                    self.available_methods.append(tmp)
                    print("\n\n adding in enabled method\n\n")
                i+=1
             

agent1 = GreedyAgent(sys.argv[1],'localhost',9876)

